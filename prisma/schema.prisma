// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  telegramId   String?        @unique @map(name: "telegram_id")
  telegramLink String?        @unique @map(name: "telegram_link")
  createdAt    DateTime       @default(now()) @map("created_at")
  firstName    String?        @map(name: "first_name")
  lastName     String?        @map(name: "last_name")
  languageCode String?        @default("ru") @map(name: "language_code")
  price        Int            @default(150) @map(name: "price")
  free         Boolean        @default(false) @map(name: "is_free")
  payerId      Int?           @map(name: "payer_id")
  payments     Payment[]
  devices      UserDevice[]
  protocols    UserProtocol[]
  payer        User?          @relation("UserToPayer", fields: [payerId], references: [id])
  dependants   User[]         @relation("UserToPayer")

  @@map("users")
}

model UserDevice {
  id     Int    @id @default(autoincrement())
  userId Int    @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])
  device Device @map(name: "device")

  @@map("user_devices")
}

model UserProtocol {
  id       Int         @id @default(autoincrement())
  userId   Int         @map(name: "user_id")
  user     User        @relation(fields: [userId], references: [id])
  protocol VPNProtocol @map(name: "protocol")

  @@map("user_protocols")
}

model Payment {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @map(name: "user_id")
  paymentDate DateTime @default(now())
  amount      Int
  currency    String   @default("RUB")

  @@map("payments")
}

model Plan {
  id          Int      @id @default(autoincrement())
  name        String
  amount      Int
  duration    Int
  peopleCount Int      @default(1) @map(name: "people_count")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("plans")
}

enum Device {
  Android
  iOS
  macOS
  Linux
  Windows
  Android_TV
  Google_TV
}

enum VPNProtocol {
  WireGuard
  IKEv2
  Outline
  VLess
}
